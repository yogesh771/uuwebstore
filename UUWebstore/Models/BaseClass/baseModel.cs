using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Web.Mvc;
using System.Globalization;
using System.Reflection;
using System.Web.Routing;
using System.Data.Entity;
using System.Security.Cryptography;
using System.IO;
using System.Diagnostics;
using UUWebstore.Models.Repositories;

namespace UUWebstore.Models
{
    public class baseClass : UUWebstore.Models.sbv_uuwebstoreEntities
    {
        #region AutoGenerated Password
        public static string GetRandomPasswordString(int pwdLength)
        {
            int asciiZero;
            int asciiNine;
            int asciiA;
            int asciiZ;
            int count = 0;
            int randNum;
            string randomString;

            System.Random rRandom = new System.Random(System.DateTime.Now.AddMinutes(0).Millisecond);

            asciiZero = 48;
            asciiNine = 57;
            asciiA = 64;
            asciiZ = 90;

            randomString = "";
            while ((count < pwdLength))
            {
                if (count % 2 == 0)
                {
                    randNum = rRandom.Next(asciiZero, asciiNine);
                }
                else
                {
                    randNum = rRandom.Next(asciiA, asciiZ);
                }
                if (((randNum >= asciiZero) && (randNum <= asciiNine)) || ((randNum >= asciiA) && (randNum <= asciiZ)))
                {
                    randomString = (randomString + ((char)(randNum)));
                    count = (count + 1);
                }
            }
            return randomString;
        }
        #endregion
        #region Configuration
        public static string GetWebConfigValue(string Name)
        {
            return System.Configuration.ConfigurationManager.AppSettings[Name].ToString(); ;
        }

        #endregion
        #region Send Mail
        //public static void SendMail(String EmailIDTo, String SubjectText, String Body, String[] attachments = null)
        //{
        //    try
        //    {

        //        string EMAIL_SENT = GetWebConfigValue("EMAIL_SENT");
        //        string COMPANY_EMAIL = GetWebConfigValue("COMPANY_EMAIL");
        //        string COMPANY_EMAIL_PWD = GetWebConfigValue("COMPANY_EMAIL_PWD");
        //        string Host = GetWebConfigValue("Host");

        //        string CC = GetWebConfigValue("CC");
        //        //string BCC = GetWebConfigValue("BCC");

        //        SmtpClient smtpClient = new SmtpClient();
        //        MailMessage message = new MailMessage();
        //        MailAddress fromAddress = new MailAddress(COMPANY_EMAIL, SubjectText);
        //        smtpClient.Host = Host;
        //        smtpClient.Port = 587;
        //        smtpClient.EnableSsl = true;
        //        smtpClient.UseDefaultCredentials = false;
        //        smtpClient.Credentials = new System.Net.NetworkCredential(COMPANY_EMAIL, COMPANY_EMAIL_PWD);

        //        message.From = fromAddress;
        //        message.To.Add(Convert.ToString(EmailIDTo.Trim()));
        //        //message.CC.Add(Convert.ToString(CC));
        //        // message.Bcc.Add(Convert.ToString(BCC));

        //        StringBuilder sb = new StringBuilder();
        //        if (attachments != null)
        //        {
        //            foreach (var item in attachments)
        //            {
        //                if (item != null)
        //                    message.Attachments.Add(new Attachment(item));
        //            }
        //        }
        //        message.Subject = SubjectText;
        //        message.IsBodyHtml = true;
        //        message.Body = Body;// +sb.ToString();
        //        if (EMAIL_SENT == "Y")
        //        {
        //            smtpClient.Send(message);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        //}
        #endregion



    }

    public enum AdminInfo
    {
         FullName,  LoginID, logo, userPhoto, userType
    }

    public enum FileType
    {
        PDF,
        DOC,
        TXT,
        CSV,
        XLS,
        XLSX,
        JPG,
        PNG,
        BMP,
    }



    public static class BaseUtil
    {
        private static baseClass db = new baseClass();
        // private static CommonUtil commonUtil = new CommonUtil();
        public static string JobpostOption { get; set; }
        #region Date & Time
        public static String WeekNumber(DateTime dt)
        {

            DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(dt);

            return "Week-" + CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(dt, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Sunday);
        }

        public static String WeekNumberStartDate(DateTime dt)
        {

            DayOfWeek day = DayOfWeek.Sunday;
            int diff = dt.DayOfWeek - day;
            if (diff < 0)
            {
                diff += 7;
            }

            return dt.AddDays(-1 * diff).Date.ToString("dd-MMM-yyyy");

        }

        public static DateTime GetCurrentDateTime()
        {
            Int32 diffMinutes = Convert.ToInt32(GetWebConfigValue("MIN_DIFF"));
            return System.DateTime.Now.AddMinutes(diffMinutes);
        }
        public static DateTime GetCalculatedDateTime(int day)
        {
            Int32 diffMinutes = Convert.ToInt32(GetWebConfigValue("MIN_DIFF"));
            return System.DateTime.Now.AddMinutes(diffMinutes).AddDays(day);
        }
        public static DateTime GetTodayDate()
        {
            Int32 diffMinutes = Convert.ToInt32(GetWebConfigValue("MIN_DIFF"));
            return System.DateTime.Today.AddMinutes(diffMinutes).Date;
        }
        
        public static DateTime convertToDate(string str) {
            DateTime dt;

            string dd =  str.Substring(0, 2);
            string mm = str.Substring(3, 2);
            string yy = str.Substring(6, 4);
            string dat = mm + "/" + dd + "/" + yy;
            dt = Convert.ToDateTime(dat);
            return dt;
        }
        #endregion

        #region Configuration
        public static string GetWebConfigValue(string Name)
        {
            return System.Configuration.ConfigurationManager.AppSettings[Name].ToString(); ;
        }

        #endregion

        #region Set Property
        public static void SetProperty(object p, string propName, object value)
        {
            Type t = p.GetType();
            PropertyInfo info = t.GetProperty(propName);
            if (info == null)
                return;
            if (!info.CanWrite)
                return;
            info.SetValue(p, value, null);
        }
        #endregion



        #region Session
        public static void SetSessionValue(String Key, String Value)
        {
            HttpContext.Current.Session[Key] = Value;
        }
        public static String GetSessionValue(String Key)
        {
            try
            {
                return HttpContext.Current.Session[Key] != null ? HttpContext.Current.Session[Key].ToString() : string.Empty;
            }
            catch (Exception e)
            { throw e; }
        }

        #endregion

        #region Accesible Pages

        public static List<string> AccesiblePages(int UserRole)
        {           
            List<string> listAccessilePages = new List<string>();
            try
            {
                var au = db.userRights.Where(e=>e.roleID== UserRole).Select(e=> new
                          {
                              ACTION = (e.controllerName+e.actionName ).ToUpper()
                          }
                          ).ToList();

                foreach (var item1 in au)
                {
                    listAccessilePages.Add(item1.ACTION);
                }

            }


            catch (Exception ex)
            {
                throw ex;
            }
            return listAccessilePages;
        }
        public static List<string> ListControllerExcluded()
        {
            List<string> list = new List<string>() { "JSON", "HOME","ACCOUNT", "users" };
            return list;
        }
     
        public static bool CheckAuthentication(ActionExecutingContext filterContext)
        {   List<string> accesiblePages = null;
            bool result = false;

            string actionName = filterContext.ActionDescriptor.ActionName;
            string controllerName = filterContext.ActionDescriptor.ControllerDescriptor.ControllerName;
            String Action = string.Format("{0}{1}", controllerName, actionName).ToUpper();

            int UserRole = 0;
            if (IsAuthenticated())
            {
                UserRole = Convert.ToInt32(GetSessionValue(AdminInfo.userType.ToString()));
            }
          
                accesiblePages = AccesiblePages(UserRole);
            
            foreach (var item in accesiblePages)
            {
                if (Action == item)
                {
                    result = true;
                    break;
                }

            }

            return result;
        }

        #endregion
        

        public static bool IsAuthenticated()
        {
            return string.IsNullOrEmpty(GetSessionValue(AdminInfo.LoginID.ToString())) ? false : true;
        }


        public static string RoleID()
        {
            return Convert.ToString(GetSessionValue(AdminInfo.userType.ToString()));
        }
        #region Application Path

        static HttpContext Context
        {
            get { return HttpContext.Current; }
        }

        static HttpRequest Request
        {
            get { return Context.Request; }
        }


        public static UrlHelper GetUrlHelper()
        {
            return new UrlHelper(HttpContext.Current.Request.RequestContext);
        }

        public static string GetActionPath(string controllerActionName) //Ex: "Category/Edit"
        {
            return GetApplicationPath(Request.RequestContext) + string.Format("/{0}", controllerActionName);
        }

        public static string GetActionPath(string controllerName, string actionName)
        {
            return GetApplicationPath(Request.RequestContext) + string.Format("/{0}/{1}", controllerName, actionName);
        }

        public static string GetApplicationPath(RequestContext requestContext)
        {
            string retPath;
            string httpOrigin = Request.ServerVariables["HTTP_ORIGIN"];
            string applicationPath = Request.ApplicationPath;
            //Approach #1: OK:Post
            //retPath = (applicationPath == "/" ? httpOrigin : httpOrigin + applicationPath);
            //Approach #2 OK:All
            retPath = string.Format("{0}://{1}", Request.Url.Scheme, Request.Url.Authority) + (applicationPath == "/" ? "" : applicationPath);
            return retPath;
        }

        public static string GetApplicationPath()
        {
            string retPath;
            string applicationPath = Request.ApplicationPath;
            retPath = string.Format("{0}://{1}", Request.Url.Scheme, Request.Url.Authority) + (applicationPath == "/" ? "" : applicationPath);
            return retPath;
        }
        public static string GetLoginID()
        {
            return SessionUtil.GetLoginID();
        }

        public static string GetCurrentController()
        {
            return Convert.ToString(Request.RequestContext.RouteData.Values["controller"]);
        }
        public static string GetCurrentAction()
        {
            return Convert.ToString(Request.RequestContext.RouteData.Values["action"]);
        }

        public static List<string> GetControllerNames()
        {
            List<string> controllerNames = new List<string>();
            GetSubClasses<Controller>().ForEach(
                type => controllerNames.Add(type.Name));
            return controllerNames;
        }

        private static List<Type> GetSubClasses<T>()
        {
            return Assembly.GetCallingAssembly().GetTypes().Where(
                type => type.IsSubclassOf(typeof(T))).ToList();
        }

        public static List<string> GetControllerActionNames(Type t)
        {
            return t.GetMethods().Where(m => m.ReturnType == typeof(ActionResult))
                .Select(m => m.Name).Distinct().ToList();
        }
        public static Type GetType(string typeName)
        {
            var type = Type.GetType(typeName);
            if (type != null) return type;
            foreach (var a in AppDomain.CurrentDomain.GetAssemblies())
            {
                type = a.GetType(typeName);
                if (type != null)
                    return type;
            }
            return null;
        }
        #endregion
       
        
        // Central Method for sending emails using send grid 

        public static string sendEmailer(string ToEmail, string Mail_Subject, string HTML_Body, string attachment)
        {
            string result = "no";
            //var apiKey = db.sendGridDetails.Select(e => new { e.APIKEY }).FirstOrDefault();
            //var client = new SendGridClient(apiKey.APIKEY);
            //var from = new EmailAddress("info@mulberryindia.com", "Mulberry India");
            //var to = new EmailAddress(ToEmail);
            //var plainTextContent = "";
            //var msg = MailHelper.CreateSingleEmail(from, to, Mail_Subject, plainTextContent, HTML_Body);
            try {
                var response = "";
                result= "ok";
            }
            catch(Exception e)
            {
                result = "no";
            }
            HTML_Body = null;
            return result;
        }

        public static string sendSMS(string msg,string mobile)
        {
            string senderid = "Electo";
            string type = "Trans";
            //For localhost during debugging code
            string trackkey = "lkFUql84t4BPcenGVwQOIEixnR47p8";

            //for server
            //string trackkey = "eZlzNvDWlyB7hejRJV9hoeY8YBNe6i";
            WebRequest request = WebRequest.Create("http://panel.cloudshope.com/index.php/front/Api_1?trackkey=" + trackkey + "&service=SMS&message=" + msg + "&to=" + mobile + "&route=5&senderid=" + senderid + "&type=" + type + "&unicode=" + 0);
            request.Method = "POST";
            //request.ContentType = "text/xml";
            request.ContentType = "text/xml;charset=UTF-8";
            //request.ContentType = "application/x-www-form-urlencoded";
            WebResponse response = request.GetResponse();
            if (((HttpWebResponse)response).StatusDescription.Equals("OK"))
            {
                return "ok";
            }
            else
            {
                return "not sent";
            }
        }

        // Central Method for string encryption
        public static string encrypt(string encryptString)
        {
            string EncryptionKey = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);
            using (System.Security.Cryptography.Aes encryptor = Aes.Create())
            {
                Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] {
                    0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76
                });
                encryptor.Key = pdb.GetBytes(32);
                encryptor.IV = pdb.GetBytes(16);
                using (MemoryStream ms = new MemoryStream())
                {
                    using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(clearBytes, 0, clearBytes.Length);
                        cs.Close();
                    }
                    encryptString = Convert.ToBase64String(ms.ToArray());
                }
            }
            return encryptString;
        }

        // Central Method for string decryption
        public static string Decrypt(string cipherText)
        {
            string EncryptionKey = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            cipherText = cipherText.Replace(" ", "+");
            byte[] cipherBytes = Convert.FromBase64String(cipherText);
            using (Aes encryptor = Aes.Create())
            {
                Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] {
            0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76
        });
                encryptor.Key = pdb.GetBytes(32);
                encryptor.IV = pdb.GetBytes(16);
                using (MemoryStream ms = new MemoryStream())
                {
                    using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(cipherBytes, 0, cipherBytes.Length);
                        cs.Close();
                    }
                    cipherText = Encoding.Unicode.GetString(ms.ToArray());
                }
            }
            return cipherText;
        }

       
    }

 
    public class BaseValidation
    {
        public BaseValidation()
        {

        }
        public BaseValidation(bool isRequired, string requiredText, string validationId = null)
        {
            this.IsRequired = isRequired;
            this.RequiredText = requiredText;
            this.ValidationId = validationId;
        }
        public bool IsRequired { get; set; }
        public string ValidationId { get; set; }
        public string RequiredText { get; set; }
        public HtmlString GetValidationString()
        {
            var vs = "";
            if (this.ValidationId != null)
            {
                string ret = " " + BaseConst.VALIDATION_ISREQUIRED + "='{0}' " + BaseConst.VALIDATION_REQ_MSG + "='{1}' " + BaseConst.VALIDATION_ID + "='{2}' ";
                vs = string.Format(ret, Convert.ToString(this.IsRequired).ToLower(), this.RequiredText, this.ValidationId);
            }
            else
            {
                string ret = " " + BaseConst.VALIDATION_ISREQUIRED + "='{0}' " + BaseConst.VALIDATION_REQ_MSG + "='{1}' ";
                vs = string.Format(ret, Convert.ToString(this.IsRequired).ToLower(), this.RequiredText);
            }
            return new HtmlString(vs);
        }
    }
    public static class BaseConst
    {
        public const string VALIDATION_ISREQUIRED = "data-valc-isrequired";
        public const string VALIDATION_REQ_MSG = "data-valc-required-msg";
        public const string VALIDATION_ID = "data-valc-validation-id";

    }

    public static class SessionUtil
    {
        public static int GetUserID()
        {
            return Convert.ToInt32(BaseUtil.GetSessionValue(AdminInfo.LoginID.ToString()));
        }
        public static string GetLoginID()
        {
            return BaseUtil.GetSessionValue(AdminInfo.LoginID.ToString());
        }
    }

   
}
